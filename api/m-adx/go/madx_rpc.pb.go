// Code generated by protoc-gen-go. DO NOT EDIT.
// source: madx_rpc.proto

package openrtb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DspClient is the client API for Dsp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DspClient interface {
	RealTimeBidding(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
}

type dspClient struct {
	cc *grpc.ClientConn
}

func NewDspClient(cc *grpc.ClientConn) DspClient {
	return &dspClient{cc}
}

func (c *dspClient) RealTimeBidding(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, "/openrtb.Dsp/RealTimeBidding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DspServer is the server API for Dsp service.
type DspServer interface {
	RealTimeBidding(context.Context, *BidRequest) (*BidResponse, error)
}

func RegisterDspServer(s *grpc.Server, srv DspServer) {
	s.RegisterService(&_Dsp_serviceDesc, srv)
}

func _Dsp_RealTimeBidding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspServer).RealTimeBidding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openrtb.Dsp/RealTimeBidding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspServer).RealTimeBidding(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dsp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openrtb.Dsp",
	HandlerType: (*DspServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RealTimeBidding",
			Handler:    _Dsp_RealTimeBidding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "madx_rpc.proto",
}

func init() { proto.RegisterFile("madx_rpc.proto", fileDescriptor_madx_rpc_fea71427d26b6b6e) }

var fileDescriptor_madx_rpc_fea71427d26b6b6e = []byte{
	// 109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4d, 0x4c, 0xa9,
	0x88, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x2f, 0x48, 0xcd,
	0x2b, 0x2a, 0x49, 0x92, 0xe2, 0x02, 0x49, 0x40, 0x04, 0x8d, 0x5c, 0xb9, 0x98, 0x5d, 0x8a, 0x0b,
	0x84, 0xec, 0xb8, 0xf8, 0x83, 0x52, 0x13, 0x73, 0x42, 0x32, 0x73, 0x53, 0x9d, 0x32, 0x53, 0x52,
	0x32, 0xf3, 0xd2, 0x85, 0x84, 0xf5, 0xa0, 0xea, 0xf5, 0x9c, 0x32, 0x53, 0x82, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0xa4, 0x44, 0x50, 0x05, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x00,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0xfd, 0xae, 0xbb, 0x6c, 0x00, 0x00, 0x00,
}
